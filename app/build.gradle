plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.dagger.hilt.android'
}

android {
    namespace 'org.imaginativeworld.simplemvvm'
    compileSdkVersion 33
    buildToolsVersion "33.0.0"

    defaultConfig {
        applicationId "org.imaginativeworld.simplemvvm"
        minSdkVersion 21
        targetSdkVersion 33
        versionCode 1
        versionName "1.0.0.000000" // Major.Minor.Patch.YYMMDD
        vectorDrawables.useSupportLibrary = true

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        signingConfig signingConfigs.debug

        // Constants
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())

        buildConfigField "String", "API_KEY", "\"${properties.getProperty('API_KEY')}\""

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas"]
            }
        }
    }

    buildTypes {
        local { // Local
            initWith debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            loadConfigurationProperties it, "config/internal.properties"

            matchingFallbacks = ['debug']
        }

        debug { // Development
            debuggable true
            minifyEnabled false
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            loadConfigurationProperties it, "config/development.properties"
        }

        staging { // Staging
            initWith debug
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            loadConfigurationProperties it, "config/staging.properties"

            matchingFallbacks = ['release']
        }

        release { // Production
            debuggable false
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            loadConfigurationProperties it, "config/release.properties"
        }
    }

//    flavorDimensions "feature"
//    productFlavors {
//        flavorone {
//            dimension "feature"
//            applicationIdSuffix ".flavorone"
//            versionNameSuffix "-flavorone"
//        }
//        flavortwo {
//            dimension "feature"
//            applicationIdSuffix ".flavortwo"
//            versionNameSuffix "-flavortwo"
//        }
//    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
        freeCompilerArgs += "-opt-in=kotlin.RequiresOptIn"
    }

    buildFeatures {
        viewBinding true
        dataBinding true

        // Disable unused AGP features
        resValues false
        shaders false
    }

    hilt {
        enableAggregatingTask = true
    }

    signingConfigs {
        debug {
            storeFile file('../debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'androidx.core:core-ktx:1.10.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    // Fragment
    implementation "androidx.fragment:fragment-ktx:1.5.6"

    // Material Design
    implementation 'com.google.android.material:material:1.8.0'

    // Retrofit
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.3'

    // Moshi
    implementation 'com.squareup.retrofit2:converter-moshi:2.9.0'
    implementation "com.squareup.moshi:moshi-kotlin:1.14.0"
    kapt "com.squareup.moshi:moshi-kotlin-codegen:1.14.0"

    // Gson
    implementation 'com.google.code.gson:gson:2.10.1'

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.6.4"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.4"

    // Room Persistence Library
    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Room: Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:$room_version"

    // Android Navigation Architecture
    implementation "androidx.navigation:navigation-fragment-ktx:2.5.3"
    implementation "androidx.navigation:navigation-ui-ktx:2.5.3"

    // Splash Screen
    implementation "androidx.core:core-splashscreen:1.0.0"

    // Glide
    implementation 'com.github.bumptech.glide:glide:4.15.1'
    kapt 'com.github.bumptech.glide:compiler:4.15.1'

    // Paging
    implementation "androidx.paging:paging-runtime-ktx:3.1.1"

    // Permission
    implementation 'com.karumi:dexter:6.2.3'

    // Timber
    implementation 'com.jakewharton.timber:timber:5.0.1'

    // Hilt
    implementation "com.google.dagger:hilt-android:$hilt_version"
    kapt "com.google.dagger:hilt-compiler:$hilt_version"

    // Shimmer
    implementation 'com.facebook.shimmer:shimmer:0.5.0'

    // Firebase BoM
    implementation platform('com.google.firebase:firebase-bom:31.2.3')

    // Firebase Libraries
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-messaging-ktx'

    // Maps
    implementation 'com.google.android.gms:play-services-maps:18.1.0'

    // Location
    implementation 'com.google.android.gms:play-services-location:21.0.1'

    // Image compressor
    implementation 'id.zelory:compressor:3.0.1'

    // No Internet Library
    implementation 'org.imaginativeworld.oopsnointernet:oopsnointernet:2.0.0'

    // Image Carousel
    implementation "org.imaginativeworld.whynotimagecarousel:whynotimagecarousel:2.1.0"

    // OneSignal SDK
    implementation 'com.onesignal:OneSignal:4.8.5'

    // Coil
    implementation("io.coil-kt:coil:2.2.2")

    // Palette
    implementation 'androidx.palette:palette-ktx:1.0.0'

    // Markdown
    implementation "io.noties.markwon:core:$markwon_version"
    implementation "io.noties.markwon:ext-latex:$markwon_version"
    implementation "io.noties.markwon:inline-parser:$markwon_version"

    // Latex
    implementation "ru.noties:jlatexmath-android:$jlatexmath_version"
    // for Cyrillic symbols
    implementation "ru.noties:jlatexmath-android-font-cyrillic:$jlatexmath_version"
    // for Greek symbols
    implementation "ru.noties:jlatexmath-android-font-greek:$jlatexmath_version"
}

// Workaround for OneSignal from:
// https://github.com/OneSignal/OneSignal-Gradle-Plugin/issues/37#issuecomment-391983620
googleServices { disableVersionCheck = true }

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "17"
    }
}

/**
 * Load properties from configuration file.
 */
def loadConfigurationProperties(buildType, String fileLocation) {
    Properties properties = new Properties()
    properties.load(project.rootProject.file(fileLocation).newDataInputStream())

    buildType.buildConfigField "String", "BASE_URL", "\"${properties.getProperty("baseUrl")}\""
}